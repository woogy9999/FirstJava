package com.sist.main;

/*
		객체지향 프로그램 : 하드웨어 (직접회로 => 모방 )
		------------- 조립식 (한개 클래스 => 부품) => CBD
		=> 이미 만들어진 클래스 : 변경 (요구사항) => 오버라이딩
		1차 ===> 2차 오버라이딩
		-------------------- 재사용
		
		1. 목적 => 재사용
				  ---- 변경이 가능, 추가가 가능
				  	   ---		 ---
				  	   오버라이딩 	 오버로딩
				  	   면접 : 정의 => 부연 (프로젝트)
	    
		2. 신뢰성이 좋다 : 검증을 거친다
		3. 대규모 프로젝트 => 재사용
		   안산시청 ==> 서울시청
		   			  ------ c#, 국민연금 : Pro-C
		4. 클래스 => 추상화 => 구체화
				   ----- 설계 ------구현
				   | 공통적인 데이터나 기능들을 모아서 설계
				     -----------------
				      벤치마킹 (CGV,메가박스,롯데시네마)
				   | 단순화 : 시뮬레이션 
				   
				   | 공통적인 데이터 / 기능
				   					-- 메소드
				   					   ----- 동작
				   					   메뉴 / 버튼 / 마우스..
				   	------------- 변수
				   				  ---- 눈에 보이는 데이터: 명사형
	    1. 변수 설정
	   		=> 기능(메소드에서 공통으로 사용되는 변수)
	   		
	   		예) 
	   			달력
	   			사용자로부터 입력값: year/month
	   			요일을 구한다 :week
	   			달력 출력: week부터 => 1... year/month
	   			=전역변수 / 멤버변수
	   		=> 어떤 기능 => 사용되는 변수 => 중복
	   		=> 요구사항 => 기능 (메소드) => 사용되는 데이터 찾기
	   									| 관련된 데이터 여러개
	   									| 클래스로 사용자 정의 데이터형
	   									| ~VO
 			저장 데이터 다른 경우 => 따라 저장 (인스턴스)
 			저장데이터 1개 사용 => 정적
 			-----------------------------------------
 			변수 초기화 여부: 생성자 => 생략
 			생성자 ㅣ 윈도우, 데이터베이스 , 서버연결
 			없는 경우 => 자동 생성 (디폴트 생성)
 			생성자 : 여러개 사용이 가능
 					------------- 오버로딩
 					=> 클래스명 동일 (리턴형이 없다)
 					void도 리턴형이다
 					=> 다른 클래스에서 사용이 가능하게 만든다
 						=> public
 					---------------------------------
 					기능 처리 => 메소드
 					=> 다른 클래스와 통신을 담당 => public
 					=> 형식)
 							[접근지정어][제어어] 리턴형 메소드명(매개변수..)
 							{
 								return 값;
 							}
 		---------------------------------------------
 							
 							
	   									
*/
public class 정리_6장 {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
